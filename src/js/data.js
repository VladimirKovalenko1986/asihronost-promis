// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

// const date = new Date(60000);
// console.log('üöÄ ~ date', date);

// console.log(date.getMonth());

// console.log(date.getTime());

// –†–∞–∑–Ω–∏—Ü–∞

// const date1 = Date.now();

// setTimeout(() => {
//   const date2 = Date.now();

//   console.log('üöÄ ~ date1', date1);
//   console.log('üöÄ ~ setTimeout ~ date2', date2);

//   console.log(date2 - date1);
// }, 3000);

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// * –¢–∞–π–º–µ—Ä

// const refs = {
//   startBtn: document.querySelector('button[data-action-start]'),
//   stopBtn: document.querySelector('button[data-action-stop]'),
//   clockface: document.querySelector('.js-clockface'),
// };

// * –ü–∏—à–µ–º —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å
// class Timer {
// –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∏–∂–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
// constructor({ onTick }) {
//   this.intervalId = null;
//   this.isActive = false;
//   this.onTick = onTick;

//   this.init();
// }

// –î–æ–±–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ
// init() {
//   const time = this.getTimeComponents(0);
//   this.onTick(time);
// }

// –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –Ω–∏–∂–Ω–µ–π –∑–∞–¥–∞—á–∏
// start() {
//   if (this.isActive) {
//     return;
//   }
//   const starTime = Date.now();
//   this.isActive = true;

//   this.intervalId = setInterval(() => {
//     const currentTime = Date.now();
//     const deltaTime = currentTime - starTime;

//     const time = this.getTimeComponents(deltaTime);

// –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à –∞–≥—É–º–µ–Ω—Ç  —Ñ—É–Ω–∫—Ü–∏–∏
//     this.onTick(time);
//   }, 1000);
// }

// stop() {
//   clearInterval(this.intervalId);
//   this.isActive = false;

// –°—Ç–∞–≤–∏–º –æ—á–∏—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
//     const time = this.getTimeComponents(0);
//     this.onTick(time);
//   }

//   pad(value) {
//     return String(value).padStart(2, '0');
//   }

//   getTimeComponents(time) {
//     const hours = this.pad(
//       Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
//     );
//     const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
//     const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));

//     return { hours, mins, secs };
//   }
// }

// const timer = new Timer(
// –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
//   { onTick: updateClockface }
// );
// * –ü–∏—à–µ–º —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã
// {
// –î–µ–ª–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–ª–∏–µ–∞–Ω
// intervalId: null,
// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
// isActive: false,

// start() {
// –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞
// if (this.isActive) {
//   return;
// }
// –ï—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
// const starTime = Date.now();
// this.isActive = true;

// this.intervalId = setInterval(() => {
// –ù–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// const currentTime = Date.now();
//   console.log('üöÄ ~ setInterval ~ currentTime', currentTime);
// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
// const deltaTime = currentTime - starTime;

// –û—Ç–Ω–∏–º–∞–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–µ –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ
// console.log(currentTime - starTime);
// timeComponents –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–º–µ–Ω–∏–ª–∏ –Ω–∞ { hours, mins, secs } –ø—Ä–æ–≤–µ–ª–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–∞—Ä–∏–∑–∞—Ü–∏—é
// –∑–∞–º–µ–Ω—è–µ–º { hours, mins, secs } –Ω–∞ time —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω
// const time = getTimeComponents(deltaTime);
// –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç—å
// console.log(`${hours}:${mins}:${secs}`);
// –î–æ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// updateClockface(time);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ä–µ–º–µ–Ω–∏
// console.log(
//   `${pad(new Date(deltaTime).getUTCHours())}:${pad(
//     new Date(deltaTime).getMinutes()
//   )}:${pad(new Date(deltaTime).getSeconds())}`
// );
// }, 1000);
//   },
//   stop() {
//     clearInterval(this.intervalId);
//     this.isActive = false;
//   },
// };

// refs.startBtn.addEventListener('click', timer.start.bind(timer));

// refs.stopBtn.addEventListener('click', timer.stop.bind(timer));

// –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ 0 –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 2-—Ö –∑–Ω–∞–∫–æ–≤
// function pad(value) {
//   return String(value).padStart(2, '0');
// }

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Å–æ–ª–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º—è (—Ö—Ö:—Ö—Ö:—Ö—Ö)
// –ö–æ–¥ –≤–∑—è—Ç —Å –∞–¥—Å–∫–æ–π –∫–æ–ø–∏–ø–∞—Å—Ç—ã —Å–æ —Å—Ç–µ–∫–∞

// –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∫–ª–∞—Å—Å
// function getTimeComponents(time) {
//   const hours = pad(
//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
//   );
//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));

//   return { hours, mins, secs };
// }

// function updateClockface({ hours, mins, secs }) {
//   refs.clockface.textContent = `${hours}:${mins}:${secs}`;
// }

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// –ù–∞–ø–∏—Å–∞—Ç–∏ —Ç–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É –¥–æ –ù–æ–≤–æ–≥–æ —Ä–æ–∫—É, —è–∫–∏–π –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É STOP

const timeEL = document.getElementById('time');
const stopBtnEl = document.getElementById('stopBtn');
// –ù–æ–≤–∏–π —Ä—ñ–∫ - 1 —Å—ñ—á–Ω—è 00:00 2024
// –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞ - 22 –ª—é—Ç–æ–≥–æ 20:20 2023
// –ë—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ setinterval(),

// ?  1. –í—ñ–¥ –Ω–æ–≤–æ–≥–æ —Ä–æ–∫—É –≤–∏–¥–Ω—è—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É - —Ç–∞–∫–∏–º —á–∏–Ω–æ–º –º–∏ –æ—Ç—Ä–∏–º—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ —á–∞—Å—ñ (–±—É–¥–µ–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –º—ñ–ª—ñ—Å–∫—É–Ω–¥–∞–º–∏)
//  ? 2. –û—Ç—Ä–∏–º–∞–Ω—ñ –º—ñ–ª–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –≤ –ø. 1 –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –¥–Ω—ñ, –≥–æ–¥–∏–Ω–∏, —Ö–≤, —Å–µ–∫—É–Ω–¥–∏, —è–∫—ñ –ª–∏—à–∏–ª–∏—Å—å –¥–æ –Ω–æ–≤–æ–≥–æ —Ä–æ–∫—É.
//  ? 3. –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ –¥–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—Ü—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

// * –ö–æ–¥ –∏–∑ —Å–∞–π—Ç–∞, –≤ —Å—Ç–æ—Ä–æ–º –æ–±—Ä–∞–∑—Ü–µ

// Set the date we're counting down to
// var countDownDate = new Date('Jan 5, 2024 15:37:25').getTime();

// Update the count down every 1 second
// var x = setInterval(function () {
// Get today's date and time
// var now = new Date().getTime();

// Find the distance between now and the count down date
// var distance = countDownDate - now;

// Time calculations for days, hours, minutes and seconds
// var days = Math.floor(distance / (1000 * 60 * 60 * 24));
// var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
// var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
// var seconds = Math.floor((distance % (1000 * 60)) / 1000);

// Output the result in an element with id="demo"
// document.getElementById('demo').innerHTML =
//   days + 'd ' + hours + 'h ' + minutes + 'm ' + seconds + 's ';

// If the count down is over, write some text
//   if (distance < 0) {
//     clearInterval(x);
//     document.getElementById('demo').innerHTML = 'EXPIRED';
//   }
// }, 1000);
