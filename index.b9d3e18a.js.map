{"mappings":"AAiFEA,YAAW,WAAM,GAFH","sources":["src/js/promis.js"],"sourcesContent":["// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// * Promis\n// const promise = new Promise((resolve, reject) => {\n//   const canFullfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFullfill) {\n//       resolve('Все ок');\n//     }\n\n//     reject('Промис вызван с ошибкой');\n//   }, 1000);\n// });\n\n// Выводим значение промиса\n\n// 1 способ\n// * Внутрение результаты\n// promise.then(\n//   result => {\n//     console.log(result);\n//   },\n//   error => {\n//     console.log(error);\n//   }\n// );\n\n// 2 способ\n//* Можно передать внешними функциями\n\n// promise.then(onFulfilled, onRejeccted);\n\n// function onFulfilled(result) {\n//   console.log(result);\n// }\n\n// function onRejected(error) {\n//   console.log(error);\n// }\n\n// * Цепочка промисов\n// promise\n//   .then(result => {\n//     console.log(result);\n\n//     return 5;\n//   })\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   });\n\n// * Передача ошибки\n\n// promise\n//   .then(onFulfilled)\n//   .then(x => {\n//     console.log(x);\n\n// Метод который выкидывет ошибку\n//   throw new Error('Ошибка во втором ');\n\n//   return 10;\n// })\n// .then(y => {\n//   console.log(y);\n// })\n// автоматически отлавливает все ошибки\n// .catch(error => console.log(error))\n// функция которая будет выполнена в любом случае\n// .finally(() => console.log('Я буду выполнен в любом случае!!'));\n\n// * Промисификация функции\n\nconst makeOrder = dish => {\n  const DALEY = 1000;\n\n  setTimeout(() => {}, DALEY);\n};\n\nmakeOrder('пирожок');\n\nfunction onMakeOrderSuccess(result) {\n  console.log('onMakeOrderSuccess');\n  console.log(result);\n}\n\nfunction onMakerOrderError(error) {\n  console.log('onMakerOrderError');\n  console.log(error);\n}\n"],"names":["setTimeout"],"version":3,"file":"index.b9d3e18a.js.map"}