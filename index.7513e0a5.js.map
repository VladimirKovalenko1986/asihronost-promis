{"mappings":"AAiIU,MAAJA,EAAS,CACb,cACA,SACA,kBACA,aACA,cAIqD,IAAnDC,EAAc,EAElB,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,gBACjCC,YAAaF,SAASC,cAAc,WACpCE,cAAeH,SAASC,cAAc,aACtCG,UAAWJ,SAASC,cAAc,8BAsBpC,SAASI,EAAkBC,GACzBR,EAAKI,YAAYK,YAAcD,C,CAGjC,SAASE,EAAmBF,GAC1BR,EAAKK,cAAcI,YAAcD,C,CA6BG,SAA7BG,EAAIC,GACX,OAAO,IAAIC,SAAQC,IACjB,MAAMC,GA+BaC,EA/BQ,IA+BHC,EA/BS,KAgC5BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtD,IAAuBA,EAAKC,EA7BxBI,YAAW,KACTP,EAAQ,C,MAAEF,E,KAAOG,GAAO,GACvBA,EAAK,G,CAzD6Bf,EAApCC,SAASqB,iBAAiB,SAIlB,WACXvB,GAAe,EAED,MAARwB,EAAWzB,EAAO0B,IAAIb,GAEOJ,EAAjB,IAEaG,EAAZ,yCAoBIe,EAlBPF,EAmBhBV,QAAQa,KAAKD,GAASE,MAAK,EAACf,MAAEA,EAAKG,KAAEA,MACnCR,EAAkB,cAACK,qBAA6BG,aAP7B,UAAIH,MAAEA,EAAKG,KAAEA,EAAMa,YAAAC,IACxC,MAAMC,EAAK,WAAWD,aAAuBjB,aAAiBG,cAC9Df,EAAKM,UAAUyB,mBAAmB,YAAaD,E,CAMfE,CAAZ,C,MAAEpB,E,KAAOG,E,YAAMhB,GAAc,IAInD,SAAmB0B,GACjBZ,QAAQoB,IAAIR,GAASE,MAAKO,IACxBxB,EAAmB,qCAAmE,G,CA1BxFyB,CAAUZ,GAiBZ,IAAyBE,C","sources":["src/js/promis.js"],"sourcesContent":["// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// * Promis\n// const promise = new Promise((resolve, reject) => {\n//   const canFullfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFullfill) {\n//       resolve('Все ок');\n//     }\n\n//     reject('Промис вызван с ошибкой');\n//   }, 1000);\n// });\n\n// Выводим значение промиса\n\n// 1 способ\n// * Внутрение результаты\n// promise.then(\n//   result => {\n//     console.log(result);\n//   },\n//   error => {\n//     console.log(error);\n//   }\n// );\n\n// 2 способ\n//* Можно передать внешними функциями\n\n// promise.then(onFulfilled, onRejeccted);\n\n// function onFulfilled(result) {\n//   console.log(result);\n// }\n\n// function onRejected(error) {\n//   console.log(error);\n// }\n\n// * Цепочка промисов\n// promise\n//   .then(result => {\n//     console.log(result);\n\n//     return 5;\n//   })\n//   .then(x => {\n//     console.log(x);\n\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   });\n\n// * Передача ошибки\n\n// promise\n//   .then(onFulfilled)\n//   .then(x => {\n//     console.log(x);\n\n// Метод который выкидывет ошибку\n//   throw new Error('Ошибка во втором ');\n\n//   return 10;\n// })\n// .then(y => {\n//   console.log(y);\n// })\n// автоматически отлавливает все ошибки\n// .catch(error => console.log(error))\n// функция которая будет выполнена в любом случае\n// .finally(() => console.log('Я буду выполнен в любом случае!!'));\n\n// * Промисификация функции\n\n// const makeOrder = dish => {\n//   const DALEY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('Вот ваше блюдо!');\n//       }\n//       reject('Извини закончились продукты!');\n//     }, DALEY);\n//   });\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakerOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakerOrderError(error) {\n//   console.log('onMakerOrderError');\n//   console.log(error);\n// }\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// * Живой пример\n\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('Ку-ку это resolve');\n//       }\n//       reject('Ку-ку это reject');\n//     }, 2000);\n//   });\n// };\n\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\n\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// * Иподром\n\n// Набор коней\nconst horses = [\n  'Secretariat',\n  'Eclips',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscult',\n];\n\n//Переменная для автоматической простановки порядкового номера\nlet raceCounter = 0;\n\nconst refs = {\n  startBtn: document.querySelector('.js-race-btn'),\n  winnerFiled: document.querySelector('.winner'),\n  progressField: document.querySelector('.progress'),\n  tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\n// По нажатию на кнопку запускаем всх наших лошадей\n\nrefs.startBtn.addEventListener('click', onStart);\n\n// * Делаем функции\n\nfunction onStart() {\n  raceCounter += 1;\n  // Массив промисов\n  const promises = horses.map(run);\n  // Перед заездом очищаем строку победителя\n  updateWinnerFiled('');\n  // Записываем в текст что заезд начался\n  updateProgresFiled('Заезд начался ставки не принимаються!');\n\n  determineWinner(promises);\n  waiForAll(promises);\n}\n\nfunction updateWinnerFiled(message) {\n  refs.winnerFiled.textContent = message;\n}\n\nfunction updateProgresFiled(message) {\n  refs.progressField.textContent = message;\n}\n\n// Чтобы обновлялась таблица\nfunction updateResultTable({ horse, time, raceCounter }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n  refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    updateWinnerFiled(`Победитель ${horse}, финишировал за ${time} времени`);\n    updateResultTable({ horse, time, raceCounter });\n  });\n}\n\nfunction waiForAll(horsesP) {\n  Promise.all(horsesP).then(x => {\n    updateProgresFiled('Заезд окончен, принимаються ставки');\n  });\n}\n//???????????????????????????????????????????????????????????????\n\n// console.log(\n//   '%c Заезд начался ставки не принимаються!',\n//   'color: brown; font-size: 14px;'\n// );\n\n// Функция которая будет запускать одного коня\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\n// run(horses[0]).then(x => console.log(x));\n// run(horses[1]).then(x => console.log(x));\n\n// * Обработка массивов промисов\n\n// race - берет первый который выполнился не дожидаясь всех остальных\n// Promise.race(promises).then(({ horse, time }) => {\n//   console.log(\n//     `%c Победитель ${horse}, финишировал за ${time} времени`,\n//     'color: blue; font-size: 14px;'\n//   );\n// });\n// all - берет все которые находтся в масиве\n// Promise.all(promises).then(x => {\n//   console.log(x);\n//   console.log(\n//     '%c Заезд окончен, принимаються ставки',\n//     'color: red; fond-size: 14px;'\n//   );\n// });\n\n// функция случайной лошади\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"names":["$62186696f59831af$var$horses","$62186696f59831af$var$raceCounter","$62186696f59831af$var$refs","startBtn","document","querySelector","winnerFiled","progressField","tableBody","$62186696f59831af$var$updateWinnerFiled","message","textContent","$62186696f59831af$var$updateProgresFiled","$62186696f59831af$var$run","horse","Promise","resolve","time","min","max","Math","floor","random","setTimeout","addEventListener","promises","map","horsesP","race","then","raceCounter","raceCounter1","tr","insertAdjacentHTML","$62186696f59831af$var$updateResultTable","all","x","$62186696f59831af$var$waiForAll"],"version":3,"file":"index.7513e0a5.js.map"}